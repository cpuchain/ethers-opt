/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export interface OpGasPriceOracleInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DECIMALS"
      | "baseFee"
      | "baseFeeScalar"
      | "blobBaseFee"
      | "blobBaseFeeScalar"
      | "decimals"
      | "gasPrice"
      | "getL1Fee"
      | "getL1FeeUpperBound"
      | "getL1GasUsed"
      | "isEcotone"
      | "isFjord"
      | "l1BaseFee"
      | "overhead"
      | "scalar"
      | "setEcotone"
      | "setFjord"
      | "version"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "DECIMALS", values?: undefined): string;
  encodeFunctionData(functionFragment: "baseFee", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "baseFeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobBaseFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "blobBaseFeeScalar",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "gasPrice", values?: undefined): string;
  encodeFunctionData(functionFragment: "getL1Fee", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getL1FeeUpperBound",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getL1GasUsed",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isEcotone", values?: undefined): string;
  encodeFunctionData(functionFragment: "isFjord", values?: undefined): string;
  encodeFunctionData(functionFragment: "l1BaseFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "overhead", values?: undefined): string;
  encodeFunctionData(functionFragment: "scalar", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setEcotone",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setFjord", values?: undefined): string;
  encodeFunctionData(functionFragment: "version", values?: undefined): string;

  decodeFunctionResult(functionFragment: "DECIMALS", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "baseFee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "baseFeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobBaseFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "blobBaseFeeScalar",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "gasPrice", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getL1Fee", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getL1FeeUpperBound",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getL1GasUsed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isEcotone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFjord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "l1BaseFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "overhead", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "scalar", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setEcotone", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFjord", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "version", data: BytesLike): Result;
}

export interface OpGasPriceOracle extends BaseContract {
  connect(runner?: ContractRunner | null): OpGasPriceOracle;
  waitForDeployment(): Promise<this>;

  interface: OpGasPriceOracleInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DECIMALS: TypedContractMethod<[], [bigint], "view">;

  baseFee: TypedContractMethod<[], [bigint], "view">;

  baseFeeScalar: TypedContractMethod<[], [bigint], "view">;

  blobBaseFee: TypedContractMethod<[], [bigint], "view">;

  blobBaseFeeScalar: TypedContractMethod<[], [bigint], "view">;

  decimals: TypedContractMethod<[], [bigint], "view">;

  gasPrice: TypedContractMethod<[], [bigint], "view">;

  getL1Fee: TypedContractMethod<[_data: BytesLike], [bigint], "view">;

  getL1FeeUpperBound: TypedContractMethod<
    [_unsignedTxSize: BigNumberish],
    [bigint],
    "view"
  >;

  getL1GasUsed: TypedContractMethod<[_data: BytesLike], [bigint], "view">;

  isEcotone: TypedContractMethod<[], [boolean], "view">;

  isFjord: TypedContractMethod<[], [boolean], "view">;

  l1BaseFee: TypedContractMethod<[], [bigint], "view">;

  overhead: TypedContractMethod<[], [bigint], "view">;

  scalar: TypedContractMethod<[], [bigint], "view">;

  setEcotone: TypedContractMethod<[], [void], "nonpayable">;

  setFjord: TypedContractMethod<[], [void], "nonpayable">;

  version: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DECIMALS"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "baseFeeScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blobBaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "blobBaseFeeScalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "decimals"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "gasPrice"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL1Fee"
  ): TypedContractMethod<[_data: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL1FeeUpperBound"
  ): TypedContractMethod<[_unsignedTxSize: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getL1GasUsed"
  ): TypedContractMethod<[_data: BytesLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "isEcotone"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "isFjord"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "l1BaseFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "overhead"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "scalar"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "setEcotone"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFjord"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "version"
  ): TypedContractMethod<[], [string], "view">;

  filters: {};
}
